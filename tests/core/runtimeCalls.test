----------------------------------------------------------------------------------------------------
# Basic function call with statements before and after it

- foo()
    -- "called"

-- "before"
foo()
-- "after"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

before
called
after

----------------------------------------------------------------------------------------------------
# Reference names in closure which have been defined already

c()
    -- "c"

b()
    -- "b1"
    c()
    -- "b2"

a()
    -- "a1"
    b()
    -- "a2"

a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

a1
b1
c
b2
a2

----------------------------------------------------------------------------------------------------
# Reference names in closure which are defined later

a()
    -- "a1"
    b()
    -- "a2"

b()
    -- "b1"
    c()
    -- "b2"

c()
    -- "c"

a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

a1
b1
c
b2
a2

----------------------------------------------------------------------------------------------------
# Reference names in closure which are defined later

a()
    -- x

x = 42

a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Reference names in closure which are defined later

a()
    -- x
    -- y

x = y = 42

a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
42

----------------------------------------------------------------------------------------------------
# Simple function return

a()
    = 42

-- a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Statements after function return are not called

a()
    = 42
    -- "do not call"

-- a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Call with one argument

a(arg1)
    -- arg1

a(42)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Call with two arguments

a(arg1, arg2)
    -- arg1
    -- arg2

a(42, 43)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
43

----------------------------------------------------------------------------------------------------
# Arguments not specified are undefined

a(arg1, arg2)
    -- arg1
    -- arg2

a(42)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
undefined

----------------------------------------------------------------------------------------------------
# Extra arguments are ignored

a(arg1)
    -- arg1

a(42, 43)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Default argument

a(arg1, arg2=43)
    -- arg1
    -- arg2

a(42)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
43

----------------------------------------------------------------------------------------------------
# Default argument not used

a(arg1, arg2=43)
    -- arg1
    -- arg2

a(42, 52)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
52

----------------------------------------------------------------------------------------------------
# Default argument not used

a(arg1, arg2=43)
    -- arg1
    -- arg2

a(42, 52)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
52

----------------------------------------------------------------------------------------------------

4()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Object is not callable
<no file>, line 1, in <source>

----------------------------------------------------------------------------------------------------
# References to closures at multiple levels of nesting

x = 1

a()
    y = 2
    -- x
    -- y
    b()
        z = 3
        -- x
        -- y
        -- z
    b()

a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1
2
1
2
3

----------------------------------------------------------------------------------------------------
# Functions return undefined by default

foo()
    _

-- foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

undefined

----------------------------------------------------------------------------------------------------
# Functions return undefined by default

foo(a)
    if a
        _
    else
        = 1

-- foo(true)
-- foo(false)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

undefined
1

----------------------------------------------------------------------------------------------------
# Functions return undefined by default

foo()
    try
        _
    catch
        = 1
    finally
        _

-- foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

undefined

----------------------------------------------------------------------------------------------------
# This in module

import test

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%file: lib/test.up

test()
    -- this

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object test>

----------------------------------------------------------------------------------------------------
# This in function in main module

import test

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%file: lib/test.up

test()
    foo()
        -- this

    foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object test>

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------
# Make a property bind its function and then call it

Foo is class
    + this + that
        = that

foo = Foo()
-- foo + 1
foo.["op:+"]
-- foo + 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1
1

----------------------------------------------------------------------------------------------------
# Make a property bind its function and then call it

Foo is class
    + that is in this
        = that

foo = Foo()
-- 1 is in foo
-- 1 is in foo

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1
1

----------------------------------------------------------------------------------------------------
# Anonymous function

import test

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%file: lib/test.up

bar()
    = => this

test()
    -- bar()()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object test>

----------------------------------------------------------------------------------------------------
# Basic s-call

+ fluff(b) =>
    muff:: b

+ muff(m)
    = m*2

-- fluff(2)


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

4

----------------------------------------------------------------------------------------------------
