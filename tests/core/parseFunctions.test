====================================================================================================
# Function declarations

Functions are prefixed with a + if they are public or a - if they are private. The body is an indented block. Functions with no body are allowed, but are obviously no-ops.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="foo" access="public"/>

----------------------------------------------------------------------------------------------------

- foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="foo" access="private"/>

----------------------------------------------------------------------------------------------------

- foo() {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="foo" access="private">
    <Id name="null"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(arg1) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Id name="null"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(arg1, arg2) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="arg2"/>
    <Id name="null"/>
</FunctionDeclaration>


====================================================================================================
Default argument values are included in assignments.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, arg2=42) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="arg2">
        <Integer value="42"/>
    </Argument>
    <Id name="null"/>
</FunctionDeclaration>

====================================================================================================
The => operator means the block contains a single expression instead of imperative statements.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(b) => 42

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="b"/>
    <Integer value="42"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(b) => {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="b"/>
    <Id name="null"/>
</FunctionDeclaration>

====================================================================================================
A name without parentheses is a function that takes no arguments.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Id name="null"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a => {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Id name="null"/>
</FunctionDeclaration>

====================================================================================================
External argument names are a secondary name for the argument, indicated by a bullet before the name.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, •label arg2) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="arg2" outer="label"/>
    <Id name="null"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
# With default value

+ a(arg1, •label arg2=1) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="arg2" outer="label">
        <Integer value="1"/>
    </Argument>
    <Id name="null"/>
</FunctionDeclaration>

====================================================================================================
An argument name can be both internal and external.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, •arg2) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="arg2" outer="arg2"/>
    <Id name="null"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
# With default value

+ a(arg1, •arg2=42) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="arg2" outer="arg2">
        <Integer value="42"/>
    </Argument>
    <Id name="null"/>
</FunctionDeclaration>

====================================================================================================
Variadic arguments are accumulated as a list in a single argument indicated by the ellipsis.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, ...remainder) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="remainder" variadic="true"/>
    <Id name="null"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
# With default value

+ a(arg1, ...remainder=42) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="a" access="public">
    <Argument name="arg1"/>
    <Argument name="remainder" variadic="true">
        <Integer value="42"/>
    </Argument>
    <Id name="null"/>
</FunctionDeclaration>

====================================================================================================
Imperative functions
====================================================================================================
----------------------------------------------------------------------------------------------------

+ foo() do {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="foo" access="public" imperative="true">
    <Id name="null"/>
</FunctionDeclaration>

====================================================================================================
Extra arguments.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ foo() {
    ** n
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="foo" access="public">
    <Argument name="n"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ foo() {
    ** n:T
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="foo" access="public">
    <Argument name="n">
        <TypeId id="T"/>
    </Argument>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ foo() {
    ** n:T = 1
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration id="foo" access="public">
    <Argument name="n">
        <TypeId id="T"/>
        <Integer value="1"/>
    </Argument>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
