====================================================================================================
# Function declarations

Functions are prefixed with a + if they are public or a - if they are private. The body is an indented block. Functions with no body are allowed, but are obviously no-ops.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

- foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="private">
    <Id name="foo"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

- foo() {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="private">
    <Id name="foo"/>
    <Block/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(arg1) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Block/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(arg1, arg2) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="arg2"/>
    <Block/>
</FunctionDeclaration>

====================================================================================================
Default argument values are included in assignments.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, arg2=42) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="arg2">
        <Integer value="42"/>
    </Argument>
    <Block/>
</FunctionDeclaration>

====================================================================================================
The -> operator means the block contains a single expression instead of imperative statements.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(b) -> 42

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="b"/>
    <Integer value="42"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(b) -> c where c = 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="b"/>
    <Block>
        <Id name="c"/>
        <where>
            <AssignmentExpression op="=">
                <Id name="c"/>
                <Integer value="2"/>
            </AssignmentExpression>
        </where>
    </Block>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(b) -> f {
    c
} where {
    c = 2
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="b"/>
    <CallExpression>
        <Id name="f"/>
        <arg>
            <Block>
                <Id name="c"/>
                <where>
                    <AssignmentExpression op="=">
                        <Id name="c"/>
                        <Integer value="2"/>
                    </AssignmentExpression>
                </where>
            </Block>
        </arg>
    </CallExpression>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ a(b) -> f {
    c
} where {
    c = 2
} • {
    2
} where {
    c = 2
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="b"/>
    <CallExpression>
        <Id name="f"/>
        <arg>
            <Block>
                <Id name="c"/>
                <where>
                    <AssignmentExpression op="=">
                        <Id name="c"/>
                        <Integer value="2"/>
                    </AssignmentExpression>
                </where>
            </Block>
        </arg>
        <arg>
            <Block>
                <Integer value="2"/>
                <where>
                    <AssignmentExpression op="=">
                        <Id name="c"/>
                        <Integer value="2"/>
                    </AssignmentExpression>
                </where>
            </Block>
        </arg>
    </CallExpression>
</FunctionDeclaration>

====================================================================================================
A name without parentheses is a function that takes no arguments.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Block/>
</FunctionDeclaration>

====================================================================================================
External argument names are a secondary name for the argument, indicated by a bullet before the name.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, •label arg2) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="arg2" outer="label"/>
    <Block/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
# With default value

+ a(arg1, •label arg2=1) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="arg2" outer="label">
        <Integer value="1"/>
    </Argument>
    <Block/>
</FunctionDeclaration>

====================================================================================================
An argument name can be both internal and external.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, •arg2) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="arg2" outer="arg2"/>
    <Block/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
# With default value

+ a(arg1, •arg2=42) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="arg2" outer="arg2">
        <Integer value="42"/>
    </Argument>
    <Block/>
</FunctionDeclaration>

====================================================================================================
Variadic arguments are accumulated as a list in a single argument indicated by the ellipsis.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ a(arg1, ...remainder) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="remainder" variadic="true"/>
    <Block/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
# With default value

+ a(arg1, ...remainder=42) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="a"/>
    <Argument name="arg1"/>
    <Argument name="remainder" variadic="true">
        <Integer value="42"/>
    </Argument>
    <Block/>
</FunctionDeclaration>

====================================================================================================
Imperative functions
====================================================================================================
----------------------------------------------------------------------------------------------------

+ foo() do {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <Block imperative="true"/>
</FunctionDeclaration>

====================================================================================================
Extra arguments.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ foo() {
    ** n
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <Argument name="n"/>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ foo() {
    ** n:T
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <Argument name="n">
        <TypeId name="T"/>
    </Argument>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ foo() {
    ** n:T = 1
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <Argument name="n">
        <TypeId name="T"/>
        <Integer value="1"/>
    </Argument>
</FunctionDeclaration>

====================================================================================================
Where combined with a function declaration will apply to the function body and its parameters.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ foo() {
    a
} where {
    a = 1
    b = 1
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <Block>
        <Id name="a"/>
        <where>
            <AssignmentExpression op="=">
                <Id name="a"/>
                <Integer value="1"/>
            </AssignmentExpression>
            <AssignmentExpression op="=">
                <Id name="b"/>
                <Integer value="1"/>
            </AssignmentExpression>
        </where>
    </Block>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ foo() -> a where {
    a = 1
    b = 1
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <Block>
        <Id name="a"/>
        <where>
            <AssignmentExpression op="=">
                <Id name="a"/>
                <Integer value="1"/>
            </AssignmentExpression>
            <AssignmentExpression op="=">
                <Id name="b"/>
                <Integer value="1"/>
            </AssignmentExpression>
        </where>
    </Block>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ foo() -> call {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <CallExpression>
        <Id name="call"/>
        <arg>
            <Block/>
        </arg>
    </CallExpression>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------

+ foo() -> call {
    a
} where {
    a = 1
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<FunctionDeclaration access="public">
    <Id name="foo"/>
    <CallExpression>
        <Id name="call"/>
        <arg>
            <Block>
                <Id name="a"/>
                <where>
                    <AssignmentExpression op="=">
                        <Id name="a"/>
                        <Integer value="1"/>
                    </AssignmentExpression>
                </where>
            </Block>
        </arg>
    </CallExpression>
</FunctionDeclaration>

----------------------------------------------------------------------------------------------------
