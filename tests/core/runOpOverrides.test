====================================================================================================
Binary operators
====================================================================================================
----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + (this + n:Int32):Int32 do {
        = a + n
    }

    + (this + n:Thing):Double do {
        = a + n.a
    }
}

do {
    thing = Thing()
    -- thing + 1
    -- thing + thing
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

11
20.000000

====================================================================================================
Incremental assignment operators.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + this += n do {
        a += n
    }
}

do {
    thing = Thing()
    thing += 1
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

11

----------------------------------------------------------------------------------------------------
# If incremental operator not overriden but math op is, use that

+ Thing {
    + a = 0
    
    + This(aa) do {
        a = aa
    }
    
    + this + n do {
        = Thing(a + n)
    }
}

do {
    thing = Thing(10)
    thing += 1
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

11

----------------------------------------------------------------------------------------------------
# Incremental operator on a property of a member

+ Member {
    + a = 10
    
    + this += n do {
        a += n
    }
}

+ Thing {
    + member = Member()
}

do {
    thing = Thing()
    thing.member += 1
    -- thing.member.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

11

====================================================================================================
Concat operator
====================================================================================================
----------------------------------------------------------------------------------------------------

+ Thing {
    + a = "me"
    
    + this ++ other do {
        = "%a with%other"
    }
}

do {
    thing = Thing()
    -- "%thing you"
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

me with you

====================================================================================================
Comparison operators.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + This(v) do {
        a = v
    }
    
    + this == other do {
        = a == other.a
    }
}

do {
    a = Thing(10)
    b = Thing(20)
    -- a == b
    -- a == a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

false
true

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + This(v) do {
        a = v
    }
    
    + this != other do {
        = a != other.a
    }
}

do {
    a = Thing(10)
    b = Thing(10)
    -- a == b
    -- a != b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

false
false

----------------------------------------------------------------------------------------------------
# != deduced from ==

+ Thing {
    + a = 10
    
    + This(v) do {
        a = v
    }
    
    + this == other do {
        = a == other.a
    }
}

do {
    a = Thing(10)
    b = Thing(10)
    -- a == b
    -- a != b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
false

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + This(v) do {
        a = v
    }
    
    + this > other do {
        = a > other.a
    }
}

do {
    a = Thing(10)
    b = Thing(15)
    -- a > b
    -- b > a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

false
true

----------------------------------------------------------------------------------------------------

+ Thing {
    + this > other do {
        = "hi"
    }
}

do {
    a = Thing()
    -- a > a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Invalid type for truth test
<no file>, line 3
            = "hi"
               ^^

----------------------------------------------------------------------------------------------------

+ Thing {
    + this is in other do {
        = this == other
    }

    + this not in other do {
        = this != other
    }
}

do {
    a = Thing()
    b = Thing()
    -- a is in a
    -- a is in b

    -- a not in a
    -- a not in b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
false
false
true

----------------------------------------------------------------------------------------------------
# "not in" deduced from "is in" operator

+ Thing {
    + a = 10
    
    + This(v) do {
        a = v
    }
    
    + this is in other do {
        = a == other.a
    }
}

do {
    a = Thing(10)
    b = Thing(10)
    -- a is in b
    -- a not in b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
false

----------------------------------------------------------------------------------------------------
# Error if both "is in" and "not in" not supported and you call one

+ Thing {
    + This() do {
    }
}

do {
    a = Thing()
    b = Thing()
    -- a not in b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Operator not supported
<no file>, line 9
        -- a not in b
             ^^^^^^

====================================================================================================
Prefix operators.
====================================================================================================
----------------------------------------------------------------------------------------------------
# Incremental operator on a property of a member

+ Thing {
    + !this do {
        = true
    }
}

do {
    thing = Thing()
    -- !thing
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true

----------------------------------------------------------------------------------------------------
# Truth override in and expressions

+ Thing {
    + a = 0
    
    + This(n) do {
        a = n
    }
    
    + !this do {
        = a <= 10
    }
}

do {
    a = Thing(1)
    b = Thing(11)
    -- a & true
    -- true & a
    -- b & true
    -- true & b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

false
false
true
true

----------------------------------------------------------------------------------------------------
# Truth override in and expressions

+ Thing {
    + a = 0
    
    + This(n) do {
        a = n
    }
    
    + !this do {
        = a <= 10
    }
}

do {
    a = Thing(1)
    b = Thing(11)
    -- a | false
    -- false | a
    -- b | false
    -- false | b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

false
false
true
true

----------------------------------------------------------------------------------------------------
# Truth override in if statement

+ Thing {
    + a = 0
    
    + This(n) do {
        a = n
    }
    
    + !this do {
        = a <= 10
    }
}

do {
    a = Thing(1)
    b = Thing(11)
    if (a) {
        -- "hi"
    } else if (b) {
        -- "oh"
    } else {
        -- "bye"
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

oh

----------------------------------------------------------------------------------------------------
# Truth override in if expression

+ Thing {
    + a = 0
    
    + This(n) do {
        a = n
    }
    
    + !this do {
        = a <= 10
    }
}

do {
    a = Thing(1)
    b = Thing(11)
    -- if a -> "hi a" else "bye a"
    -- if b -> "hi b" else "bye b"
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

bye a
hi b

----------------------------------------------------------------------------------------------------
# Truth override in while loop

+ Thing {
    + a = 3
    
    + !this do {
        = a == 0
    }
}

do {
    thing = Thing()
    while (thing) {
        -- thing.a
        thing.a -= 1
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

3
2
1

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 0
    
    + (!this):Int32 do {
        = 2
    }
}

do {
    thing = Thing()
    -- !thing
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Operator must return Int1
<no file>, line 4
        + (!this):Int32 do {
        ^^^^^^^^^^^^^^^^^^^^

----------------------------------------------------------------------------------------------------
# Auto-convert return of number in comparison op to a boolean value

+ Thing {
    + a = 0
    + !this do {
        = a
    }
}

do {
    thing = Thing()
    -- !thing
    thing.a = 5
    -- !thing
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

false
true

----------------------------------------------------------------------------------------------------
# Auto-convert return of an object in comparison op to a boolean value

+ State {
    + truth = false
    
    + This(t) do {
        truth = t
    }
    
    + !this do {
        = !truth
    }
}

+ Thing {
    + state = State(true)
    + !this do {
        = state
    }
}

do {
    thing = Thing()
    -- !thing
    thing.state = State(false)
    -- !thing
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
false

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 5
    
    + -this do {
        neg = Thing()
        neg.a = -a
        = neg
    }
}

do {
    thing = Thing()
    nthing = -thing
    -- nthing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

-5

----------------------------------------------------------------------------------------------------

+ Thing {
    + in this do {
        = 5
    }
}

do {
    thing = Thing()
    -- in thing
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

5

====================================================================================================
Index operators.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ Thing {
    + this[index] do {
        = index + 5
    }
}

do {
    thing = Thing()
    -- thing[10]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

15

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + this[index] = value do {
        a = index + value
    }
}

do {
    thing = Thing()
    thing[10] = 5
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

15

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + -= this[index] do {
        a -= index
    }
}

do {
    thing = Thing()
    -= thing[1]
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

9

====================================================================================================
Slice operators.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ Thing {
    + this[g to h by i] do {
        = g + h + i
    }
}

do {
    thing = Thing()
    -- thing[10 to 100 by 1]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

111

----------------------------------------------------------------------------------------------------

+ Thing {
    + this[g to h by i=1] do {
        = g + h + i
    }
}

do {
    thing = Thing()
    -- thing[10 to 100]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

111

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + this[g to h by i] = value do {
        a = g + h + i + value
    }
}

do {
    thing = Thing()
    thing[10 to 100 by 1] = 5
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

116

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + this[g to h by i=1] = value do {
        a = g + h + i + value
    }
}

do {
    thing = Thing()
    thing[10 to 100] = 5
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

116

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = 10
    
    + -= this[g to h by i] do {
        a -= g + h + i
    }
}

do {
    thing = Thing()
    -= thing[10 to 100 by 1]
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

-101

====================================================================================================
Lookup operators.
====================================================================================================
----------------------------------------------------------------------------------------------------

+ Thing {
    + this.[key] do {
        = "found %key"
    }
}

do {
    thing = Thing()
    -- thing.["foo"]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

found foo

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = "nada"
    
    + this.[key] = value do {
        a = "got %key = %value"
    }
}

do {
    thing = Thing()
    thing.["foo"] = "bar"
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

got foo = bar

----------------------------------------------------------------------------------------------------

+ Thing {
    + a = "nada"
    
    + -= this.[key] do {
        a = "removed %key"
    }
}

do {
    thing = Thing()
    -= thing.["foo"]
    -- thing.a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

removed foo

----------------------------------------------------------------------------------------------------
