----------------------------------------------------------------------------------------------------
# Basic subscriber

numbers = <>

on n in numbers
    -- n

for i in 0 to 2
    numbers <<< i
-- "done"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

0
1
2
done

----------------------------------------------------------------------------------------------------
# Task as subscriber

doubler(inputs)
    outputs = <>
    task()
        for n in inputs
            -- "double %n"
            outputs <- n*2
    task..()
    = outputs

numbers = <>
doubles = doubler(numbers)

on n in doubles
    -- n

for i in 0 to 2
    numbers <<< i
-- "done"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

double 0
0
double 1
2
double 2
4
done

----------------------------------------------------------------------------------------------------
# Generator as subscriber

doubler(inputs)
    for n in inputs
        -- "double %n"
        <- n*2

numbers = <>
doubles = doubler(numbers)

on n in doubles
    -- n

for i in 0 to 2
    numbers <<< i
-- "done"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

double 0
0
double 1
2
double 2
4
done

----------------------------------------------------------------------------------------------------
# Generator expression as subscriber

printIt(n)
    -- "got %n"
    = n

numbers = <>
doubles = for n in numbers -> printIt(n) * 2

on n in doubles
    -- n

for i in 0 to 2
    numbers <<< i
-- "done"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

got 0
0
got 1
2
got 2
4
done

----------------------------------------------------------------------------------------------------
# Generator expression with condition as subscriber

printIt(n)
    -- "got %n"
    = n

numbers = <>
doubles = for n in numbers if n > 1 -> printIt(n) * 2

on n in doubles
    -- n

for i in 0 to 2
    numbers <<< i
-- "done"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

got 2
4
done

----------------------------------------------------------------------------------------------------
# Subscriber expression

printIt(n)
    -- "got %n"
    = n

numbers = <>
doubles = on n in numbers -> printIt(n) * 2

on n in doubles
    -- n

for i in 0 to 2
    numbers <<< i
-- "done"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

got 0
0
got 1
2
got 2
4
done

----------------------------------------------------------------------------------------------------
# Subscriber expression with condition

printIt(n)
    -- "got %n"
    = n

numbers = <>
doubles = on n in numbers if n > 1 -> printIt(n) * 2

on event in doubles
    -- event

for i in 0 to 2
    numbers <<< i
-- "done"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

got 2
4
done

----------------------------------------------------------------------------------------------------
# Subscribe to an iterable object

-- "before"
on n in [1,2,3]
    -- n
-- "after"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

before
1
2
3
after

----------------------------------------------------------------------------------------------------
# Unsubscribe

printIt(n)
    -- "got %n"
    = n

numbers = <>
doubles = on n in numbers -> printIt(n) * 2

on n in doubles
    `if n > 1
    `    break
    -- n

for i in 0 to 2
    numbers <<< i
-- "done"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

got 0
0
got 1
2
got 2
4
done

----------------------------------------------------------------------------------------------------
