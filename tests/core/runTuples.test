----------------------------------------------------------------------------------------------------

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    -- a
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

5, 10

----------------------------------------------------------------------------------------------------

+ foo(n) -> n, n * 2

do {
    a, b = foo(5)
    -- a
    -- b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

5
10

----------------------------------------------------------------------------------------------------

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    -- a[0]
    -- a[1]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

5
10

----------------------------------------------------------------------------------------------------
# Create new tuple by assignment

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    b = a[0] = 3
    -- b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

3, 10

----------------------------------------------------------------------------------------------------
# Create new tuple by assignment with casting

+ foo(n) -> n, n * 2

do {
    a = foo(5.0)
    b = a[0] = 3
    -- b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

3.000000, 10.000000

----------------------------------------------------------------------------------------------------
# Create new tuple by tail assignment

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    b = a[2] = 3
    -- b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

5, 10, 3

----------------------------------------------------------------------------------------------------
# Create new tuple by increment

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    b = a += 3
    -- b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

5, 10, 3


----------------------------------------------------------------------------------------------------
# tuple truncation

do {
    a = 1, 2, 3, 4, 5
    b = a.length = 3
    -- b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1, 2, 3

----------------------------------------------------------------------------------------------------
# tuple length

do {
    a = 1, 2, 3, 4, 5
    n = 5
    b = a.length = n
    -- b
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Expected constant
<no file>, line 4
        b = a.length = n
            ^^^^^^^^

----------------------------------------------------------------------------------------------------
# tuple length

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    -- a.length
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

2

----------------------------------------------------------------------------------------------------
# nested tuple

do {
    a = (1, (2, 3), 4)
    -- a.length
    -- a[0]
    -- a[1]
    -- a[2]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

3
1
2, 3
4

----------------------------------------------------------------------------------------------------

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    -- a[2]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Index out of bounds
<no file>, line 5
        -- a[2]
           ^^^^

----------------------------------------------------------------------------------------------------

+ foo(n) -> n, n * 2

do {
    a = foo(5)
    n = 0
    -- a[n]
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Expected constant
<no file>, line 6
        -- a[n]
             ^

----------------------------------------------------------------------------------------------------
