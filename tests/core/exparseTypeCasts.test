====================================================================================================
# Type casting

The "as" operator is used to cast an expression to a different type.
====================================================================================================
----------------------------------------------------------------------------------------------------

foo as Bar

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeId name="Bar"/>
</Cast>

----------------------------------------------------------------------------------------------------

foo as Foo\Bar\Baz

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments>
        <TypeId name="Foo"/>
        <TypeId name="Bar"/>
        <TypeId name="Baz"/>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------

foo as [Foo]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments>
        <TypeId name="List"/>
        <TypeId name="Foo"/>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------

foo as {| Foo = Bar |}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments>
        <TypeId name="Map"/>
        <TypeId name="Foo"/>
        <TypeId name="Bar"/>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------

foo as <>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments>
        <TypeId name="Channel"/>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------

foo as <Foo>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments>
        <TypeId name="Channel"/>
        <TypeId name="Foo"/>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------

foo as >(Foo,Bar):Baz

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments>
        <TypeId name="Function"/>
        <TypeId name="Baz"/>
        <TypeId name="Foo"/>
        <TypeId name="Bar"/>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------

foo as Foo?

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments optionals="1">
        <TypeId name="Foo"/>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------

foo as Foo??

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments optionals="2">
        <TypeId name="Foo"/>
    </TypeArguments>
</Cast>

====================================================================================================
Combination of different type declarations.
====================================================================================================
----------------------------------------------------------------------------------------------------

foo as Foo\(Foo\Bar\Baz)\([Foo])\({| Foo = Bar |})\(<Foo>)\(>(Foo): Bar)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeArguments>
        <TypeId name="Foo"/>
        <TypeArguments>
            <TypeId name="Foo"/>
            <TypeId name="Bar"/>
            <TypeId name="Baz"/>
        </TypeArguments>
        <TypeArguments>
            <TypeId name="List"/>
            <TypeId name="Foo"/>
        </TypeArguments>
        <TypeArguments>
            <TypeId name="Map"/>
            <TypeId name="Foo"/>
            <TypeId name="Bar"/>
        </TypeArguments>
        <TypeArguments>
            <TypeId name="Channel"/>
            <TypeId name="Foo"/>
        </TypeArguments>
        <TypeArguments>
            <TypeId name="Function"/>
            <TypeId name="Bar"/>
            <TypeId name="Foo"/>
        </TypeArguments>
    </TypeArguments>
</Cast>

----------------------------------------------------------------------------------------------------
