----------------------------------------------------------------------------------------------------
# Anonymous function with no arguments

> () 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Integer value="2"/>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function with one argument

> (a) 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Argument name="a"/>
    <Integer value="2"/>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function with multiple argument

> (a,b) 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Argument name="a"/>
    <Argument name="b"/>
    <Integer value="2"/>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function with one argument and where

> (a) c where c = 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Argument name="a"/>
    <Block>
        <Id name="c"/>
        <where>
            <AssignmentExpression op="=">
                <Id name="c"/>
                <Integer value="2"/>
            </AssignmentExpression>
        </where>
    </Block>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > () {
    
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Block/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > (a) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Argument name="a"/>
        <Block/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > (a,) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Argument name="a"/>
        <Block/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > (a,b) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Argument name="a"/>
        <Argument name="b"/>
        <Block/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an assignment

x = > (a,b) {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="x"/>
    <Function>
        <Argument name="a"/>
        <Argument name="b"/>
        <Block/>
    </Function>
</AssignmentExpression>

----------------------------------------------------------------------------------------------------

foo(> (a,b) a + b)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<CallExpression>
    <Id name="foo"/>
    <arg>
        <Function>
            <Argument name="a"/>
            <Argument name="b"/>
            <BinaryExpression op="+">
                <Id name="a"/>
                <Id name="b"/>
            </BinaryExpression>
        </Function>
    </arg>
</CallExpression>

====================================================================================================
With "do" annotation.
====================================================================================================
----------------------------------------------------------------------------------------------------

> (a) do {
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Argument name="a"/>
    <Block imperative="true"/>
</Function>

====================================================================================================
Function expression shorthand.
====================================================================================================
----------------------------------------------------------------------------------------------------

n = ?.bar + 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="n"/>
    <BinaryExpression op="+">
        <GetExpression name="bar">
            <Id name="?"/>
        </GetExpression>
        <Integer value="1"/>
    </BinaryExpression>
</AssignmentExpression>

====================================================================================================
Map expression shorthand.
====================================================================================================
----------------------------------------------------------------------------------------------------

n = *.bar + 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="n"/>
    <BinaryExpression op="+">
        <GetExpression name="bar">
            <Id name="*"/>
        </GetExpression>
        <Integer value="1"/>
    </BinaryExpression>
</AssignmentExpression>

----------------------------------------------------------------------------------------------------
# Anonymous function with where clause

a = > () {
    2
} where {
    a = 1
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="a"/>
    <Function>
        <Block>
            <Integer value="2"/>
            <where>
                <AssignmentExpression op="=">
                    <Id name="a"/>
                    <Integer value="1"/>
                </AssignmentExpression>
            </where>
        </Block>
    </Function>
</AssignmentExpression>

----------------------------------------------------------------------------------------------------
# Anonymous function with where clause

a = > () {
    2
} where a = 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="a"/>
    <Function>
        <Block>
            <Integer value="2"/>
            <where>
                <AssignmentExpression op="=">
                    <Id name="a"/>
                    <Integer value="1"/>
                </AssignmentExpression>
            </where>
        </Block>
    </Function>
</AssignmentExpression>

----------------------------------------------------------------------------------------------------
# Anonymous function with where clause

> () {
    2
} where {
    a = 1
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Block>
        <Integer value="2"/>
        <where>
            <AssignmentExpression op="=">
                <Id name="a"/>
                <Integer value="1"/>
            </AssignmentExpression>
        </where>
    </Block>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function with where clause

> () {
    2
} where a = 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Block>
        <Integer value="2"/>
        <where>
            <AssignmentExpression op="=">
                <Id name="a"/>
                <Integer value="1"/>
            </AssignmentExpression>
        </where>
    </Block>
</Function>

----------------------------------------------------------------------------------------------------
