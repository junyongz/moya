----------------------------------------------------------------------------------------------------
# Anonymous function with no arguments

> () 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Integer value="2"/>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function with one argument

> (a) 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Argument name="a"/>
    <Integer value="2"/>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function with multiple argument

> (a,b) 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function>
    <Argument name="a"/>
    <Argument name="b"/>
    <Integer value="2"/>
</Function>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > () {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Id name="null"/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > (a) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Argument name="a"/>
        <Id name="null"/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > (a,) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Argument name="a"/>
        <Id name="null"/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an expression

= > (a,b) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Return>
    <Function>
        <Argument name="a"/>
        <Argument name="b"/>
        <Id name="null"/>
    </Function>
</Return>

----------------------------------------------------------------------------------------------------
# Anonymous function in an assignment

x = > (a,b) {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="x"/>
    <Function>
        <Argument name="a"/>
        <Argument name="b"/>
        <Id name="null"/>
    </Function>
</AssignmentExpression>

----------------------------------------------------------------------------------------------------

foo(> (a,b) a + b)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<CallExpression>
    <Id name="foo"/>
    <arg>
        <Function>
            <Argument name="a"/>
            <Argument name="b"/>
            <BinaryExpression op="+">
                <Id name="a"/>
                <Id name="b"/>
            </BinaryExpression>
        </Function>
    </arg>
</CallExpression>

====================================================================================================
With "do" annotation.
====================================================================================================
----------------------------------------------------------------------------------------------------

> (a) do {
    _
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function imperative="true">
    <Argument name="a"/>
    <Id name="null"/>
</Function>

====================================================================================================
Function expression shorthand.
====================================================================================================
----------------------------------------------------------------------------------------------------

n = ?.bar + 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="n"/>
    <BinaryExpression op="+">
        <GetExpression name="bar">
            <Id name="?"/>
        </GetExpression>
        <Integer value="1"/>
    </BinaryExpression>
</AssignmentExpression>

====================================================================================================
Map expression shorthand.
====================================================================================================
----------------------------------------------------------------------------------------------------

n = *.bar + 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<AssignmentExpression op="=">
    <Id name="n"/>
    <BinaryExpression op="+">
        <GetExpression name="bar">
            <Id name="*"/>
        </GetExpression>
        <Integer value="1"/>
    </BinaryExpression>
</AssignmentExpression>

----------------------------------------------------------------------------------------------------
