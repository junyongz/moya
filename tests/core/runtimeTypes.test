----------------------------------------------------------------------------------------------------

Foo is class
    _

-- Foo

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Class Foo>

----------------------------------------------------------------------------------------------------

Foo is class
    _

-- Foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------

Foo is class
    + Foo()
        -- "construct"

Foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

construct

----------------------------------------------------------------------------------------------------
# Constructor argument

Foo is class
    + Foo(a)
        -- a

Foo(42)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Constructor default argument

Foo is class
    + Foo(a, b=43)
        -- a
        -- b

Foo(42)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
43

----------------------------------------------------------------------------------------------------
# Constructors can be referred to as properties of classes and instances

Foo is class
    + Foo()
        -- "called"

-- Foo.Foo
foo = Foo()
-- foo.Foo

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function Foo>
called
<Function Foo>

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------
# Base class inheritance

Bar is class
    _

Foo is Bar
    _

foo = Foo()
-- foo is Foo
-- foo is Bar

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
true

----------------------------------------------------------------------------------------------------
# Illegal class name

class is class
    _

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Illegal class name
<no file>, line 1

----------------------------------------------------------------------------------------------------
# Illegal class name

trait is class
    _

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Illegal class name
<no file>, line 1

----------------------------------------------------------------------------------------------------
# Illegal inheritance

Foo is 2
    _

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Invalid base class declaration
<no file>, line 1

----------------------------------------------------------------------------------------------------
# Base class property reference

Bar is class
    a = 42

Foo is Bar
    _

foo = Foo()
-- foo.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Override base class property

Bar is class
    a = 42

Foo is Bar
    a = 43

foo = Foo()
-- foo.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

43

----------------------------------------------------------------------------------------------------
# Call base class constructor

Bar is class
    + Bar()
        -- "Bar %this

Foo is Bar
    + Foo()
        -- "Foo %this
        this.Bar()

Foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Foo <Object Foo>
Bar <Object Foo>

----------------------------------------------------------------------------------------------------

Foo is class
    _

-- Foo is Class
-- Foo is Object

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
true

----------------------------------------------------------------------------------------------------

Bar is class
    _

Foo is Bar
    _

-- Foo is Bar
-- Foo is Class
-- Foo is Object

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
true
true

----------------------------------------------------------------------------------------------------

Foo is class
    _

foo = Foo()
-- foo is Object
-- foo is Class

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true
false

----------------------------------------------------------------------------------------------------

foo()
    _

-- foo is Function

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true

----------------------------------------------------------------------------------------------------

foo = C"int strlen(char*)

-- foo is CFunction

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

true

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------
# "this" reference in Constructor

Foo is class
    + Foo(a)
        -- this

Foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

----------------------------------------------------------------------------------------------------
# "this" reference in member function

Foo is class
    + a()
        = this

foo = Foo()
-- foo.a()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

----------------------------------------------------------------------------------------------------
# "this" reference in property

Foo is class
    a = this

foo = Foo()
-- foo.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

----------------------------------------------------------------------------------------------------
# "this" reference in static function call followed by member function call

Foo is class
    + bar()
        -- this

Foo.bar()
foo = Foo()
foo.bar()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Class Foo>
<Object Foo>

----------------------------------------------------------------------------------------------------
# object returned from constructor

Foo is class
    + Foo()
        _

-- Foo()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------
# Property assignment within constructor

Foo is class
    + Foo(a)
        this.a = a

foo = Foo(42)
-- foo.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Class property reference

Foo is class
    a = 42

-- Foo.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Modifying property on type affects all objects that inherit from it

Foo is class
    _

foo = Foo()
-- foo.a
Foo.a = 43
-- foo.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

undefined
43

----------------------------------------------------------------------------------------------------
# Modifying property on class doesn"t affect instances if they"ve already accessed it

Foo is class
    a = 42

foo = Foo()
-- foo.a
Foo.a = 43
-- foo.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42
42

----------------------------------------------------------------------------------------------------
# Instance property reference

Foo is class
    a = "evaluated"

f = Foo()
-- f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

evaluated

----------------------------------------------------------------------------------------------------
# Property evaluation doesn"t happen until access

Foo is class
    a = (-- "evaluated")

f = Foo()
-- "before"
f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

before
evaluated

----------------------------------------------------------------------------------------------------
# Property is cached after evaluation and not computed again

callme()
    -- "called"
    = 4

Foo is class
    a = 1 + callme()

f = Foo()
-- f.a
-- f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

called
5
5

----------------------------------------------------------------------------------------------------
# Property is cached after evaluation and not computed again

Foo is class
    a = (-- "evaluated")

f = Foo()
f.a
f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

evaluated

----------------------------------------------------------------------------------------------------
# Property references outside variables in a closure

x = "in closure"

Foo is class
    a = x

f = Foo()
-- f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

in closure

----------------------------------------------------------------------------------------------------
# "this" reference in property

Foo is class
    a = this

f = Foo()
-- f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

----------------------------------------------------------------------------------------------------
# Properties referencing each other

Foo is class
    a = this.b
    b = 1

f = Foo()
-- f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1

----------------------------------------------------------------------------------------------------
# Circular property references error

Foo is class
    a = this.b
    b = this.a

f = Foo()
-- f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Circular property reference
<no file>, line 3, in b
<no file>, line 2, in a
<no file>, line 6, in <source>

----------------------------------------------------------------------------------------------------
# Override declarative assignment with imperative one

Foo is class
    + Foo()
        this.a = 42

    a = (-- 43)

f = Foo()
-- f.a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------
# getter

Foo is class
    + bar
        -- "get %this
        = 1

foo = Foo()
-- foo.bar
-- foo.bar

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

get <Object Foo>
1
get <Object Foo>
1

----------------------------------------------------------------------------------------------------
# Setter

Foo is class
    + bar = value
        -- "set %this %value

foo = Foo()
foo.bar = 1
foo.bar = 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set <Object Foo> 1
set <Object Foo> 2

----------------------------------------------------------------------------------------------------
# is true operator override

Foo is class
    + not this
        -- "not %this
        = true

foo = Foo()
-- not foo
-- is foo

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

not <Object Foo>
true
not <Object Foo>
false

----------------------------------------------------------------------------------------------------
# + operator override

Foo is class
    + this + value
        -- "+ %this
        = 42

foo = Foo()
-- foo + 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

+ <Object Foo>
42

----------------------------------------------------------------------------------------------------
# in operator override

Foo is class
    + value is in this
        -- "in %this
        = value == 1 ? true else false

foo = Foo()
-- 1 is in foo
-- 1 not in foo
-- 2 is in foo

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

in <Object Foo>
true
in <Object Foo>
false
in <Object Foo>
false

----------------------------------------------------------------------------------------------------
# index operator override

Foo is class
    + this[index]
        -- "get %index from %this
        = 42 + index

foo = Foo()
-- foo[1]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

get 1 from <Object Foo>
43

----------------------------------------------------------------------------------------------------
# index assign operator override

Foo is class
    + this[index] = value
        -- "set %index to %value on %this

foo = Foo()
foo[0] = 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set 0 to 1 on <Object Foo>

----------------------------------------------------------------------------------------------------
# index deletion operator override

Foo is class
    + -= this[index]
        -- "delete %index from %this

foo = Foo()
-= foo[0]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delete 0 from <Object Foo>

----------------------------------------------------------------------------------------------------
# slice operator override

Foo is class
    + this[index1 to index2]
        -- "get %index1 to %index2 from %this
        = 1

foo = Foo()
-- foo[0 to 2]
-- foo[0 to 2 by 3]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

get 0 to 2 from <Object Foo>
1
get 0 to 2 from <Object Foo>
1

----------------------------------------------------------------------------------------------------
# slice assign operator override

Foo is class
    + this[index1 to index2] = value
        -- "set %index1 to %index2 to %value on %this

foo = Foo()
foo[0 to 2] = 1
foo[0 to 2 by 3] = 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set 0 to 2 to 1 on <Object Foo>
set 0 to 2 to 1 on <Object Foo>

----------------------------------------------------------------------------------------------------
# slice assign operator override with increment

Foo is class
    + this[index1 to index2 by incr] = value
        -- "set %index1 to %index2 to %value on %this

foo = Foo()
foo[0 to 2] = 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set 0 to 2 to 1 on <Object Foo>

----------------------------------------------------------------------------------------------------
# slice assign operator override with increment with default value

Foo is class
    + this[index1 to index2 by (incr=3)] = value
        -- "set %index1 to %index2 by %incr to %value on %this

foo = Foo()
foo[0 to 2] = 1
foo[0 to 2 by 4] = 1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set 0 to 2 by 3 to 1 on <Object Foo>
set 0 to 2 by 4 to 1 on <Object Foo>

----------------------------------------------------------------------------------------------------
# slice operator override with increment with default value

Foo is class
    + this[index1 to index2 by (incr=2)]
        -- "get %index1 to %index2 by %incr from %this
        = 1

foo = Foo()
-- foo[0 to 2]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

get 0 to 2 by 2 from <Object Foo>
1

----------------------------------------------------------------------------------------------------
# slice deletion operator override

Foo is class
    + -= this[index1 to index2]
        -- "delete %index1 to %index2 from %this

foo = Foo()
-= foo[0 to 2]
-= foo[0 to 2 by 3]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delete 0 to 2 from <Object Foo>
delete 0 to 2 from <Object Foo>

----------------------------------------------------------------------------------------------------
# slice deletion operator override

Foo is class
    + -= this[index1 to index2 by incr]
        -- "delete %index1 to %index2 by %incr from %this

foo = Foo()
-= foo[0 to 2]
-= foo[0 to 2 by 3]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delete 0 to 2 by undefined from <Object Foo>
delete 0 to 2 by 3 from <Object Foo>

----------------------------------------------------------------------------------------------------
# slice deletion operator override

Foo is class
    + -= this[index1 to index2 by (incr=3)]
        -- "delete %index1 to %index2 by %incr from %this

foo = Foo()
-= foo[0 to 2]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delete 0 to 2 by 3 from <Object Foo>

----------------------------------------------------------------------------------------------------
# iterator operator override

Foo is class
    + in this
        <- this
        <- 1
        <- 2

foo = Foo()
for i in foo
    -- i

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>
1
2

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------
# "this" reference in bound function

Foo is class
    + bar()
        -- this

foo = Foo()
bar = foo.bar
bar()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

----------------------------------------------------------------------------------------------------
# Argument reference in bound function

Foo is class
    + bar(a)
        -- a

foo = Foo()
bar = foo.bar
bar(42)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Closure reference in bound function

x = 1

Foo is class
    + bar()
        -- x

foo = Foo()
bar = foo.bar
bar()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------
# get-retrieved bound function

Foo is class
    bar()
        _

foo = Foo()
-- foo.["bar"]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function bar>

----------------------------------------------------------------------------------------------------
# "this" reference in get-retrieved bound function

Foo is class
    + bar()
        -- this

foo = Foo()
foo.["bar"]()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Object Foo>

----------------------------------------------------------------------------------------------------
# Argument reference in get-retrieved bound function

Foo is class
    + bar(a)
        -- a

foo = Foo()
foo.["bar"](42)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Closure reference in get-retrieved bound function

x = 1

Foo is class
    + bar()
        -- x

foo = Foo()
foo.["bar"]()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1

====================================================================================================

====================================================================================================
----------------------------------------------------------------------------------------------------

Foo is class
    _

foo = Foo()
-- foo.["bar"||1]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1

----------------------------------------------------------------------------------------------------
