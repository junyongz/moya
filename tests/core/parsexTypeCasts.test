====================================================================================================
# Type casting

The "as" operator is used to cast an expression to a different type.
====================================================================================================
----------------------------------------------------------------------------------------------------

foo as Bar

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <TypeId name="Bar"/>
</Cast>

----------------------------------------------------------------------------------------------------

foo as Foo\Bar\Baz

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <Type>
        <TypeId name="Foo"/>
        <TypeId name="Bar"/>
        <TypeId name="Baz"/>
    </Type>
</Cast>

----------------------------------------------------------------------------------------------------

foo as [Foo]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <List>
        <TypeId name="Foo"/>
    </List>
</Cast>

----------------------------------------------------------------------------------------------------

foo as {Foo = Bar}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <Map>
        <BinaryExpression op="=">
            <TypeId name="Foo"/>
            <TypeId name="Bar"/>
        </BinaryExpression>
    </Map>
</Cast>

----------------------------------------------------------------------------------------------------

foo as <>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <Channel/>
</Cast>

----------------------------------------------------------------------------------------------------

foo as <Foo>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <Channel>
        <TypeId name="Foo"/>
    </Channel>
</Cast>

----------------------------------------------------------------------------------------------------

foo as (Foo => Bar)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <Function expression="true">
        <head>
            <TypeId name="Foo"/>
        </head>
        <TypeId name="Bar"/>
    </Function>
</Cast>

====================================================================================================
Combination of different type declarations.
====================================================================================================
----------------------------------------------------------------------------------------------------

foo as Foo\(Foo\Bar\Baz)\[Foo]\{Foo = Bar}\<Foo>\(Foo => Bar)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Cast>
    <Id name="foo"/>
    <Type>
        <TypeId name="Foo"/>
        <Type>
            <TypeId name="Foo"/>
            <TypeId name="Bar"/>
            <TypeId name="Baz"/>
        </Type>
        <List>
            <TypeId name="Foo"/>
        </List>
        <Map>
            <BinaryExpression op="=">
                <TypeId name="Foo"/>
                <TypeId name="Bar"/>
            </BinaryExpression>
        </Map>
        <Channel>
            <TypeId name="Foo"/>
        </Channel>
        <Function expression="true">
            <head>
                <TypeId name="Foo"/>
            </head>
            <TypeId name="Bar"/>
        </Function>
    </Type>
</Cast>

----------------------------------------------------------------------------------------------------
