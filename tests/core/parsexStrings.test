====================================================================================================
# Basic quoted strings

Strings are enclosed within double quotation marks. Single quoted strings are treated as individual characters, as you will see later.

@string/basic
====================================================================================================
----------------------------------------------------------------------------------------------------

""

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<String value=""/>

----------------------------------------------------------------------------------------------------

"abc"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<String value="abc"/>

====================================================================================================
The closing quotation mark is optional. Strings that omit them will close at the end of the line, with trailing whitespace trimmed.

@string/one-liner
====================================================================================================

"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<String value=""/>

----------------------------------------------------------------------------------------------------

"abc

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<String value="abc"/>

====================================================================================================
Let's make sure one-line strings work when nested in a few different kinds of expressions.
====================================================================================================
----------------------------------------------------------------------------------------------------

=>
    "abc
    1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <String value="abc"/>
    <Integer value="1"/>
</Function>

----------------------------------------------------------------------------------------------------
# Empty line string followed by another line

=> "
1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <String value=""/>
</Function>
<Integer value="1"/>

----------------------------------------------------------------------------------------------------

if 1
    = "A
else
    = "B

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<If>
    <Transform>
        <Integer value="1"/>
        <Return>
            <String value="A"/>
        </Return>
    </Transform>
    <else>
        <Return>
            <String value="B"/>
        </Return>
    </else>
</If>

----------------------------------------------------------------------------------------------------

=>
    if 1
        = "A
    else
        = "B

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <If>
        <Transform>
            <Integer value="1"/>
            <Return>
                <String value="A"/>
            </Return>
        </Transform>
        <else>
            <Return>
                <String value="B"/>
            </Return>
        </else>
    </If>
</Function>

====================================================================================================
Let's make sure that code following a one-line string is parsed correctly.
====================================================================================================
----------------------------------------------------------------------------------------------------

=> "abc
1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <String value="abc"/>
</Function>
<Integer value="1"/>

----------------------------------------------------------------------------------------------------

=> "
1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <String value=""/>
</Function>
<Integer value="1"/>

====================================================================================================
# Indented strings

A double quotation mark at the end of the line indicates that a subsequent indented block will
contain a string.

@string/indented
====================================================================================================
----------------------------------------------------------------------------------------------------

"
    abc

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<String value="abc"/>

----------------------------------------------------------------------------------------------------

"
    abc
    def
    geh
    
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<String value="abc
def
geh"/>

----------------------------------------------------------------------------------------------------
# Closing quotation mark can be used. This is mainly useful for preserving trailing newlines.

"
    abc
    def
    geh
"
    
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<String value="abc
def
geh"/>

====================================================================================================
Let's make sure indented strings work when nested in a few different kinds of expressions.
====================================================================================================
----------------------------------------------------------------------------------------------------

=> "
    abc

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <String value="abc"/>
</Function>

----------------------------------------------------------------------------------------------------

1 + "
    abc

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<BinaryExpression op="+">
    <Integer value="1"/>
    <String value="abc"/>
</BinaryExpression>

----------------------------------------------------------------------------------------------------

fooâ€¢ "
    abc

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<CallExpression>
    <Id name="foo"/>
    <Argument>
        <String value="abc"/>
    </Argument>
</CallExpression>

====================================================================================================
Let's make sure that code following an indented string is parsed correctly.
====================================================================================================
----------------------------------------------------------------------------------------------------

=> "
    abc
1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <String value="abc"/>
</Function>
<Integer value="1"/>

----------------------------------------------------------------------------------------------------

=>
    => "
        abc
1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <Function expression="true">
        <String value="abc"/>
    </Function>
</Function>
<Integer value="1"/>

----------------------------------------------------------------------------------------------------

=>
    => "
        abc
    1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

<Function expression="true">
    <Function expression="true">
        <String value="abc"/>
    </Function>
    <Integer value="1"/>
</Function>

----------------------------------------------------------------------------------------------------
