----------------------------------------------------------------------------------------------------

+ foo() do {
    defer {
        -- "goodbye"
    }

    defer {
        -- "ok"
    }
    
    -- "hello"
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hello
ok
goodbye

----------------------------------------------------------------------------------------------------

+ foo() do {
    if (true) {
        defer {
            -- "goodbye"
        }
    }
    
    -- "hello"
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

goodbye
hello

----------------------------------------------------------------------------------------------------

+ Thing {
    + num = 0
    
    + This(n) do {
        num = n
        -- "hello %num"
    }
    
    + dispose() do {
        -- "goodbye %num"
    }
}

+ show(b, c) do {
    -- "show"
    = 1
}

+ foo() {
    show(b, c)
} where {
    b = use Thing(1)
    c = use Thing(2)
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hello 1
hello 2
show
goodbye 2
goodbye 1

----------------------------------------------------------------------------------------------------

+ Thing {
}

+ foo() {
    b
} where {
    b = use Thing()
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Object can not be used
<no file>, line 7
        b = use Thing()
            ^^^^^^^^^^^

----------------------------------------------------------------------------------------------------

do {
    try {
        defer {
            -- "ok"
        }
        throw "bad"
    } catch (exc) {
        -- exc
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ok
bad

----------------------------------------------------------------------------------------------------

+ foo() do {
    defer {
        -- "foo"
    }
    
    bar()
}

+ bar() do {
    defer {
        -- "bar"
    }
    throw "bad"
}

do {
    try {
        defer {
            -- "main"
        }
        
        foo()
    } catch (exc) {
        -- exc
    }
    -- "done"
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

bar
foo
main
bad
done

----------------------------------------------------------------------------------------------------

+ foo() do {
    defer {
        -- "foo"
    }
    
    bar()
}

+ bar() do {
    defer {
        -- "bar"
    }
    throw "bad"
}

do {
    defer {
        -- "outer"
    }

    try {
        defer {
            -- "inner"
        }
        
        foo()
    } catch (exc) {
        -- exc
    }
    -- "done"
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

bar
foo
inner
bad
done
outer

----------------------------------------------------------------------------------------------------

+ foo(a) do {
    if a > 10 {
        throw "bad"
    } else if a > 5 {
        throw 42
    }
}

+ bar(a) do {
    defer {
        -- "outer"
    }

    try {
        defer {
            -- "inner 1"
        }
        
        foo(a)

        defer {
            ` Should never get here
            -- "inner 2"
        }
    } catch (exc:Int32) {
        -- exc
    }
    
    -- "done"
}
    
do {
    try {
        bar(6)
    } catch exc {
        -- exc
    }
    -- ""
    try {
        bar(11)
    } catch exc {
        -- exc
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

inner 1
42
done
outer

inner 1
outer
bad


----------------------------------------------------------------------------------------------------
