----------------------------------------------------------------------------------------------------

+ foo() do {
    defer {
        -- "goodbye"
    }

    defer {
        -- "ok"
    }
    
    -- "hello"
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hello
ok
goodbye

----------------------------------------------------------------------------------------------------

+ foo() do {
    if (true) {
        defer {
            -- "goodbye"
        }
    }
    
    -- "hello"
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

goodbye
hello

----------------------------------------------------------------------------------------------------

+ Thing {
    + num = 0
    
    + This(n) do {
        num = n
        -- "hello %num"
    }
    
    + dispose() do {
        -- "goodbye %num"
    }
}

+ show(b, c) do {
    -- "show"
    = 1
}

+ foo() {
    show(b, c)
} where {
    b = use Thing(1)
    c = use Thing(2)
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hello 1
hello 2
show
goodbye 2
goodbye 1

----------------------------------------------------------------------------------------------------

+ Thing {
}

+ foo() {
    b
} where {
    b = use Thing()
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Object can not be used
<no file>, line 7
        b = use Thing()
            ^^^^^^^^^^^

----------------------------------------------------------------------------------------------------

do {
    try {
        defer {
            -- "ok"
        }
        throw "bad"
    } catch (exc) {
        -- exc
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ok
bad

----------------------------------------------------------------------------------------------------

+ foo() do {
    defer {
        -- "foo"
    }
    
    bar()
}

+ bar() do {
    defer {
        -- "bar"
    }
    throw "bad"
}

do {
    try {
        defer {
            -- "main"
        }
        
        foo()
    } catch (exc) {
        -- exc
    }
    -- "done"
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

bar
foo
main
bad
done

----------------------------------------------------------------------------------------------------

+ foo() do {
    defer {
        -- "foo"
    }
    
    bar()
}

+ bar() do {
    defer {
        -- "bar"
    }
    throw "bad"
}

do {
    defer {
        -- "outer"
    }

    try {
        defer {
            -- "inner"
        }
        
        foo()
    } catch (exc) {
        -- exc
    }
    -- "done"
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

bar
foo
inner
bad
done
outer

----------------------------------------------------------------------------------------------------

+ foo(a) do {
    if a > 10 {
        throw "bad"
    } else if a > 5 {
        throw 42
    }
}

+ bar(a) do {
    defer {
        -- "outer"
    }

    try {
        defer {
            -- "inner 1"
        }
        
        foo(a)

        defer {
            ` Should never get here
            -- "inner 2"
        }
    } catch (exc:Int32) {
        -- exc
    }
    
    -- "done"
}
    
do {
    try {
        bar(6)
    } catch exc {
        -- exc
    }
    -- ""
    try {
        bar(11)
    } catch exc {
        -- exc
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

inner 1
42
done
outer

inner 1
outer
bad

----------------------------------------------------------------------------------------------------
# Illegal to throw in deferred dispose

+ Thing {
    + dispose() do {
        throw 42
    }
}


+ foo() {
    b
} where {
    b = use Thing()
}

do {
    foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Illegal to throw in defer
<no file>, line 11
        b = use Thing()
            ^^^^^^^^^^^

----------------------------------------------------------------------------------------------------
# Illegal to call functions that throw in defer

+ foo() do {
    throw "no way"
}

do {
    defer {
        foo()
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Illegal to throw in defer
<no file>, line 7
            foo()
            ^^^^^

----------------------------------------------------------------------------------------------------
# Illegal to return in defer

do {
    defer {
        = 1
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Illegal deferred statement
<no file>, line 3
            = 1
            ^^^

----------------------------------------------------------------------------------------------------
# Illegal to throw in defer

do {
    defer {
        throw 1
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Illegal to throw in defer
<no file>, line 3
            throw 1
            ^^^^^^^

----------------------------------------------------------------------------------------------------
# Illegal to throw in defer

do {
    defer {
        if (true) {
            ` Make sure we catch nested scope
            throw 1
        }
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Exception: Illegal to throw in defer
<no file>, line 5
                throw 1
                ^^^^^^^

----------------------------------------------------------------------------------------------------
# It's legal to throw in defer if you catch it

do {
    defer {
        try {
            throw 1
        } catch {
            -- "ok"
        }
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ok

----------------------------------------------------------------------------------------------------
# This is just a workspace for proving that landingpad blocks get invalidated properly

+ foo(a) do {
    if a == 0 {
        throw "bad"
    } else {
        = "clear"
    }
}

+ bar(a) do {
    if a == 0 {
        throw 42
    }
}
    
        
do {
    ` 3 different landing pads here due to intermingled defers
    try {
        -- foo(1)
        defer {
            -- "1"
        }
        -- foo(1)
    
        defer {
            -- "2"
        }
    
        -- foo(0)
    } catch (exc) {
        -- exc
    }
    
    -- ""
    
    try {
        -- foo(1)
        ` Invalidate landing pad due to new exception type thrown by bar()
        bar(1)
        -- foo(1)
        -- foo(0)
    } catch (exc) {
        -- exc
    }
    
    -- ""
    
    try {
        ` Same landing pad used for all three foo() calls
        -- foo(1)
        -- foo(1)
        -- foo(0)
    } catch (exc) {
        -- exc
    }
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

clear
clear
2
1
bad

clear
clear
bad

clear
clear
bad

----------------------------------------------------------------------------------------------------
# Defer with early return

+ foo() do {
    defer {
        -- "bye"
    }
    -- "hi"
    = 1
    -- "again"
}

do {
    -- foo()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hi
bye
1

----------------------------------------------------------------------------------------------------
# Defer with early return in nested scope

+ foo(a) do {
    defer {
        -- "bye"
    }
    -- "hi"
    if (a > 1) {
        = 1
    }
    -- "again"
}

do {
    -- foo(2)
    -- foo(0)
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hi
bye
1
hi
again
bye
unknown

----------------------------------------------------------------------------------------------------
