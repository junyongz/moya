----------------------------------------------------------------------------------------------------

do {
    a = >() {
        42
        
    }
    -- a()
}


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------

do {
    a = >() do {
        -- "hello"
    }
    a()
}


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hello

----------------------------------------------------------------------------------------------------
# Different instances of closure with different generic argument types

do {
    a = >(b) do {
        -- "hello %b"
    }
    a(24)
    a(24.5)
}


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hello 24
hello 24.500000

----------------------------------------------------------------------------------------------------
# Call closure passed in as argument

- foo(fn, n) do {
    = fn(n)
}

do {
    a = >(b) {
        b
    }
    -- foo(a, 24)
    -- foo(a, 24.5)
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

24
24.500000

----------------------------------------------------------------------------------------------------
# Call closure passed in as argument

- k = 10

- foo(fn, n) do {
    = fn(n)
}

do {
    n = 42
    a = >(b) {
        b * n * k
    }
    
    -- foo(a, 2)
    n = 100
    -- foo(a, 4)
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

840
4000

----------------------------------------------------------------------------------------------------
# Call closure passed in as argument

do {
    n = 42
    a = >(b) {
        bn
    } where {
        bn = b * n
    }
    
    -- a(2)
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

84

----------------------------------------------------------------------------------------------------
# Modify closure

do {
    n = 42
    mutate = >(b) do {
        n *= b
    }
    
    mutate(2)
    -- n
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

84

----------------------------------------------------------------------------------------------------
# Nested closure

do {
    n = 42
    a = >(b) {
        >() {
            n * b
        }
    }
    
    f = a(2)
    -- f()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

84

----------------------------------------------------------------------------------------------------
# Doubly nested closure

do {
    n = 42
    a = >() {
        >() {
            >() {
                n
            }
        }
    }
        
    f = a()
    b = f()
    -- b()
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

42

----------------------------------------------------------------------------------------------------
# Nested closure capturing lazy variable

do {
    n = 42
    a = >() {
        >(b) {
            n * b * c
        }
    } where {
        c = 2
    }
    
    -- a()(2)
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

168

----------------------------------------------------------------------------------------------------
# Nested closure mutation

do {
    n = 42
    a = >() {
        >() {
            >(b) do {
                n *= b
            }
        }
    }
    
    a()()(2)
    -- n
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

84

----------------------------------------------------------------------------------------------------
# Closure in method binds to 'this'

+ Thing {
    + a = 5
    
    + getSelf = >() {
        this
    }

    + getA = >() {
        a
    }
}

do {
    thing = Thing()
    getSelf = thing.getSelf
    -- getSelf()

    getA = thing.getA
    -- getA()
    thing.a = 10
    -- getA()
}


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__source__:Thing
5
10

----------------------------------------------------------------------------------------------------
