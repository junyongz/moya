
+ pi = π = 3.14159265358979323846264338327
+ epsilon = 2.7182818284590451

----------------------------------------------------------------------------------------------------

+ min(n1: Number, n2: Number)
    if n2 < n1 -> n2 else n1

+ max(n1: Number, n2: Number)
    if n2 > n1 -> n2 else n1

----------------------------------------------------------------------------------------------------

C"
absi32 = int abs(int);
absi64 = long long int llabs(long long int);
absf32 = float fabsf(float);
absf64 = double fabs(double);
roundf32 = float roundf(float);
roundf64 = double round(double);
floorf32 = float floorf(float);
floorf64 = double floor(double);
ceilf32 = float ceilf(float);
ceilf64 = double ceil(double);
"

+ abs(n: Int32) => absi32(n)
+ abs(n: Int64) => absi64(n)
+ abs(n: Float) => absf32(n)
+ abs(n: Float64) => absf64(n)

+ round(n: Float) => roundf32(n)
+ round(n: Float64) => roundf64(n)

+ floor(n: Float) => floorf32(n)
+ floor(n: Float64) => floorf64(n)

+ ceil(n: Float) => ceilf32(n)
+ ceil(n: Float64) => ceilf64(n)

----------------------------------------------------------------------------------------------------

C"
logf64 = double log(double);
sqrtf64 = double sqrt(double);
modf64 = double modf(double, double*);
"

+ log(n: Double) => logf64(n)

+ sqrt(log: Double) => sqrtf64(n)

+ modf(n: Float64) {
    mod = Float64[1]
    rem = modf64(n, mod)
    = (mod[0], rem)
}

----------------------------------------------------------------------------------------------------

+ Radians: rad: Float64
+ Degrees: deg: ˚: 0.0174532925rad

+ sin(n: rad): Float64 => sinf64(n)
+ cos(n: rad): Float64 => cosf64(n)
+ tan(n: rad): Float64 => tanf64(n)

+ acos(n: Float64): rad => acosf64(n)
+ asin(n: Float64): rad => asinf64(n)
+ atan(n: Float64): rad => atanf64(n)
+ atan2(n: Float64): rad => atan2f64(n)

----------------------------------------------------------------------------------------------------

+ random => moyaRandom()

----------------------------------------------------------------------------------------------------

+ even(n: Number) => this // 2 == 0
+ odd(n: Number) => this // 2 != 0

----------------------------------------------------------------------------------------------------

+ num(numerator: Float64, denominator: Float64)
    numerator/denominator

+ denom(denominator: Float64, numerator: Float64)
    numerator/denominator
